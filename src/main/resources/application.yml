# ===================================================================
# ==                    主配置 (通用配置 & 默认激活)                    ==
#所有通用配置，应当配置在这里，后面所有 on-profile独立继承这里的配置
# ===================================================================

#  Actuator相关配置
management:
  endpoints:
    web:
      exposure:
        # 确保包含了 beans
        include: health,info,beans,env

server:
  port: 8080 # Spring Boot 项目运行的端口
#  port: 9999 # Spring Boot 项目运行的端口

spring:
  profiles:
    active: dev
  application:
    name: RentHub
  threads:
    virtual:
      enabled: false
  output:
    ansi:
      enabled: always

  # --- Redis 连接配置 ---
  # Spring Boot 的 Redis 连接配置 (Sa-Token 会自动使用这里的配置)
  data:
    redis:
      # Redis数据库索引（默认为0）
      database: 0
      # Redis服务器地址
      host: 127.0.0.1
      # Redis服务器连接端口
      port: 6379
      # Redis服务器连接密码（默认为空）
      # password:
      # 连接超时时间
      timeout: 10s
      lettuce:
        pool:
          # 连接池最大连接数
          max-active: 200
          # 连接池最大阻塞等待时间（使用负值表示没有限制）
          max-wait: -1ms
          # 连接池中的最大空闲连接
          max-idle: 10
          # 连接池中的最小空闲连接
          min-idle: 0
  graphql:
    # 配置HTTP端点的路径
    http:
      path: /graphql
    # 配置GraphiQL工具的访问路径
    graphiql:
      enabled: true
      path: /graphiql


#mybatis配置
mybatis-plus:
  mapper-locations: classpath:/mapper/**/*.xml
  global-config:
    db-config:
      id-type: auto
  configuration:
    #   保持注释 将其日志输出委托给SLF4J处理
    #    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    map-underscore-to-camel-case: true
    default-enum-type-handler: com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler #枚举处理器

# 日志配置
logging:
  level:
    # 设置根日志级别为INFO，这是默认值，可以不写，但写出来更清晰
    root: info
    # 设置你的项目主包的日志级别为DEBUG，这样你代码中的log.debug()就能显示了
    renthub: debug
    # (关键) 设置MyBatis的Mapper接口日志级别为DEBUG，这样就能看到执行的SQL语句
    renthub.mapper: debug
  # 配置日志输出格式
  pattern:
    #    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n"
    #日志级别彩色
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %clr(%-5level) %logger{50} - %msg%n"


############## Sa-Token 配置 (文档: https://sa-token.cc) ##############
sa-token:
  # token 名称（同时也是 cookie 名称）
  token-name: satoken
  # token 有效期（单位：秒） 默认30天，-1 代表永久有效
  timeout: 1200
  # token 最低活跃频率（单位：秒），如果 token 超过此时间没有访问系统就会被冻结，默认-1 代表不限制，永不冻结
  active-timeout: -1
  # 是否允许同一账号多地同时登录 （为 true 时允许一起登录, 为 false 时新登录挤掉旧登录）
  is-concurrent: false
  # 在多人登录同一账号时，是否共用一个 token （为 true 时所有登录共用一个 token, 为 false 时每次登录新建一个 token）
  is-share: false
  # token 风格（默认可取值：uuid、simple-uuid、random-32、random-64、random-128、tik）
  #  token-style: uuid

  # 是否输出操作日志
  is-log: true
  # jwt秘钥
  jwt-secret-key: Bai5

#阿里云OSS
aliyun:
  oss:
    #    配置公开信息
    endpoint: oss-cn-beijing.aliyuncs.com
    bucketName: rent-hub


---

# ===================================================================
# ==             开发环境 (dev)         ==
# ===================================================================
# '---' 是 YAML 的多文档分隔符。
#下面的配置，只有在 'dev' profile 被激活时才会生效。

spring:
  config:
    activate:
      on-profile: dev
  #  配置数据库连接信息
  datasource:
    url: jdbc:mysql://localhost:3306/rent_hub
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: root
    password: abcd1234

---
# ===================================================================
# ==         数据库重置环境 (db-reset) - 只关心数据库重置         ==
# ===================================================================

#当以 db-reset profile 启动时：
#spring.datasource.*: db-reset 文档里的配置会覆盖掉 dev 文档里（或者主文档里）的任何 datasource 配置。Spring Boot 会使用 root 用户连接到 MySQL。
#spring.sql.init.*: db-reset 文档里的配置会被应用，Spring Boot 会执行你的重置脚本。
#server.port: db-reset 文档里没有这个配置。所以 Spring Boot 会向上查找，使用主文档里定义的 8080。
#logging.level.*: 同理，会使用主文档里的 info 和 debug。


spring:
  config:
    activate:
      on-profile: db-reset
  sql:
    init:
      mode: always
      schema-locations: classpath:dbRestSqlScript/reset.sql # <-- 指向新脚本
      #任何一个语句如果失败，立即停止（防止重复执行）
      continue-on-error: false

  #  配置数据库连接信息
  datasource:
    url: jdbc:mysql://localhost:3306/rent_hub
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: root
    password: abcd1234



